const inflect = require('inflect')

module.exports = (swagger, name, childNames = []) => {
	let clientName = name
	if (name === "post_mortem_template") {
		clientName = "postmortem_template"
	}
	return `
// Generated by generators/rootly/rootly.js
 
package rootly

import (
	${childNames.includes("workflow_task") ? `"regexp"` : ''}
	"github.com/GoogleCloudPlatform/terraformer/terraformutils"
	"github.com/rootlyhq/terraform-provider-rootly/client"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/schema"
)

type ${inflect.camelize(name)}Generator struct {
	RootlyService
}

func (g* ${inflect.camelize(name)}Generator) InitResources() error {
	page_size := 50
	page_num := 1

	client, err := g.RootlyClient()
	if err != nil {
		return err
	}

	for {
		resources, err := func(page_size, page_num int) ([]interface{}, error) {
			params := new(rootlygo.List${inflect.camelize(inflect.pluralize(clientName))}Params)
			params.PageSize = &page_size
			params.PageNumber = &page_num
			return client.List${inflect.camelize(inflect.pluralize(clientName))}(params)
		}(page_size, page_num)

		if err != nil {
			return err
		}

		if len(resources) == 0 {
			break
		}

  	for _, resource := range resources {
      tf_resource := g.create${inflect.camelize(name)}Resource(resource)
      g.Resources = append(g.Resources, tf_resource)
      ${childNames.map((childName) => {
        return `child_${childName}, err := g.create${inflect.camelize(childName)}Resources(tf_resource.InstanceState.ID)
      if err != nil {
        return err
      }
      g.Resources = append(g.Resources, child_${childName}...)`
      }).join('\n')}
  	}

		page_num += 1
	}

	return nil
}

func (g *${inflect.camelize(name)}Generator) create${inflect.camelize(name)}Resource(provider_resource interface{}) terraformutils.Resource {
	x, _ := provider_resource.(*client.${inflect.camelize(clientName)})
	return terraformutils.NewSimpleResource(
		x.ID,
		x.${hclResourceName(swagger, name)},
		${resourceType("x", name)},
		g.ProviderName,
		[]string{},
	)
}

${childNames.length < 1 ? '' : `
func (g *${inflect.camelize(name)}Generator) PostConvertHook() error {
  for _, resource := range g.Resources {
		${name === "workflow" ? `
    if resource.InstanceInfo.Type != "rootly_workflow_incident" && resource.InstanceInfo.Type != "rootly_workflow_action_item" && resource.InstanceInfo.Type != "rootly_workflow_post_mortem" && resource.InstanceInfo.Type != "rootly_workflow_pulse" && resource.InstanceInfo.Type != "rootly_workflow_alert" && resource.InstanceInfo.Type != "rootly_workflow_simple" {
      continue
    }
		` : `
    if resource.InstanceInfo.Type != "rootly_${name}" {
      continue
    }
		`}
    ${childNames.map((childName) => {
			let check = ''
			if (childName === "workflow_task") {
				check = `if !regexp.MustCompile(\`workflow_task\`).MatchString(${childName}.InstanceInfo.Type) {`
			} else {
				check = `if ${childName}.InstanceInfo.Type != "rootly_${childName}" {`
			}
      return `
        for i, ${childName} := range g.Resources {
          ${check}
            continue
          }
          if ${childName}.InstanceState.Attributes["${name}_id"] == resource.InstanceState.ID {
            g.Resources[i].Item["${name}_id"] = "\${" + resource.InstanceInfo.Type + ".tfer--" + resource.InstanceState.ID + ".id}"
          }
        }
      `
    }).join('\n')}
  }

  return nil
}`}

${childNames.map((childName) => childResourceTpl(swagger, name, childName)).join('\n')}
`}

const resourceType = (resource, name) => {
	switch (name) {
		case "workflow":
			return `"rootly_workflow_" + ${resource}.TriggerParams["trigger_type"].(string)`
		case "workflow_task":
			return `"rootly_workflow_task_" + ${resource}.TaskParams["task_type"].(string)`
		default:
			return `"rootly_${name}"`
	}
}

const childResourceTpl = (swagger, parentName, name) => {
	return `
func (g *${inflect.camelize(parentName)}Generator) create${inflect.camelize(name)}Resources(parent_id string) ([]terraformutils.Resource, error) {
	page_size := 50
	page_num := 1

	client, err := g.RootlyClient()
	if err != nil {
		return nil, err
	}

  var tf_resources []terraformutils.Resource

	for {
		resources, err := func(page_size, page_num int) ([]interface{}, error) {
			params := new(rootlygo.List${inflect.camelize(inflect.pluralize(name))}Params)
			params.PageSize = &page_size
			params.PageNumber = &page_num
			return client.List${inflect.camelize(inflect.pluralize(name))}(parent_id, params)
		}(page_size, page_num)

		if err != nil {
			return nil, err
		}

		if len(resources) == 0 {
			break
		}

  	for _, resource := range resources {
      tf_resources = append(tf_resources, g.create${inflect.camelize(name)}Resource(resource))
  	}

		page_num += 1
	}

	return tf_resources, nil
}

func (g *${inflect.camelize(parentName)}Generator) create${inflect.camelize(name)}Resource(provider_resource interface{}) terraformutils.Resource {
	x, _ := provider_resource.(*client.${inflect.camelize(name)})
	return terraformutils.NewSimpleResource(
		x.ID,
		x.${hclResourceName(swagger, name)},
		${resourceType("x", name)},
		g.ProviderName,
		[]string{},
	)
}
`}

const hclResourceName = (swagger, schemaName) => {
	const schema = swagger.components.schemas[schemaName]
	const slug = schema?.properties?.slug
	const name = schema?.properties?.name
	if (slug) return "Slug"
	if (name) return "Name"
	return "ID"
}
