// Generated by generators/rootly/rootly.js
package rootly

import (
	"errors"
	"os"
	"github.com/zclconf/go-cty/cty"
	"github.com/GoogleCloudPlatform/terraformer/terraformutils"
)

type RootlyProvider struct { //nolint
	terraformutils.Provider
	apiKey        string
	apiUrl        string
}

func (p *RootlyProvider) Init(args []string) error {
	if apiUrl := os.Getenv("ROOTLY_API_URL"); apiUrl != "" {
		p.apiUrl = os.Getenv("ROOTLY_API_URL")
	}
	if args[0] != "" {
		p.apiUrl = args[0]
	}
	if p.apiUrl == "" {
		p.apiUrl = "https://api.rootly.com"
	}

	if apiKey := os.Getenv("ROOTLY_API_TOKEN"); apiKey != "" {
		p.apiKey = os.Getenv("ROOTLY_API_TOKEN")
	}
	if args[1] != "" {
		p.apiKey = args[1]
	}
	if p.apiKey == "" {
		return errors.New("required API key missing")
	}

	return nil
}

func (p *RootlyProvider) InitService(serviceName string, verbose bool) error {
	var isSupported bool
	if _, isSupported = p.GetSupportedService()[serviceName]; !isSupported {
		return errors.New(p.GetName() + ": " + serviceName + " not supported service")
	}
	p.Service = p.GetSupportedService()[serviceName]
	p.Service.SetName(serviceName)
	p.Service.SetVerbose(verbose)
	p.Service.SetProviderName(p.GetName())
	// SetArgs are used for fetching details within other files in the terraformer code.
	p.Service.SetArgs(map[string]interface{}{
		"api_token": p.apiKey,
		"api_host":  p.apiUrl,
	})
	return nil
}

func (p *RootlyProvider) GetName() string {
	return "rootly"
}

func (p *RootlyProvider) GetSource() string {
	return "rootlyhq/rootly"
}

func (p *RootlyProvider) GetConfig() cty.Value {
	return cty.ObjectVal(map[string]cty.Value{
		"api_token": cty.StringVal(p.apiKey),
		"api_host":  cty.StringVal(p.apiUrl),
	})
}

func (p RootlyProvider) GetProviderData(arg ...string) map[string]interface{} {
	return map[string]interface{}{}
}

func (p *RootlyProvider) GetResourceConnections() map[string]map[string][]string {
	return map[string]map[string][]string{
		"rootly_dashboard_panel": {
					
							"rootly_dashboard": {
								"dashboard_id", "id",
							},
				},
    "rootly_form_field_option": {
					
							"rootly_form_field": {
								"form_field_id", "id",
							},
				},
    "rootly_form_field_placement_condition": {
					
							"rootly_form_field_placement": {
								"form_field_placement_id", "id",
							},
				},
    "rootly_form_field_placement": {
					
							"rootly_form_field": {
								"form_field_id", "id",
							},
				},
    "rootly_form_field_position": {
					
							"rootly_form_field": {
								"form_field_id", "id",
							},
				},
    "rootly_form_set_condition": {
					
							"rootly_form_set": {
								"form_set_id", "id",
							},
				},
    "rootly_workflow_custom_field_selection": {
					
							"rootly_workflow_incident": {
								"workflow_id", "id",
							},

							"rootly_workflow_action_item": {
								"workflow_id", "id",
							},

							"rootly_workflow_post_mortem": {
								"workflow_id", "id",
							},

							"rootly_workflow_pulse": {
								"workflow_id", "id",
							},

							"rootly_workflow_alert": {
								"workflow_id", "id",
							},

							"rootly_workflow_simple": {
								"workflow_id", "id",
							},
				},
    "rootly_workflow_form_field_condition": {
					
							"rootly_workflow_incident": {
								"workflow_id", "id",
							},

							"rootly_workflow_action_item": {
								"workflow_id", "id",
							},

							"rootly_workflow_post_mortem": {
								"workflow_id", "id",
							},

							"rootly_workflow_pulse": {
								"workflow_id", "id",
							},

							"rootly_workflow_alert": {
								"workflow_id", "id",
							},

							"rootly_workflow_simple": {
								"workflow_id", "id",
							},
				},
    "rootly_incident_permission_set_boolean": {
					
							"rootly_incident_permission_set": {
								"incident_permission_set_id", "id",
							},
				},
    "rootly_incident_permission_set_resource": {
					
							"rootly_incident_permission_set": {
								"incident_permission_set_id", "id",
							},
				},
    "rootly_incident_role_task": {
					
							"rootly_incident_role": {
								"incident_role_id", "id",
							},
				},
    "rootly_override_shift": {
					
							"rootly_schedule": {
								"schedule_id", "id",
							},
				},
    "rootly_playbook_task": {
					
							"rootly_playbook": {
								"playbook_id", "id",
							},
				},
    "rootly_schedule_rotation_active_day": {
					
							"rootly_schedule_rotation": {
								"schedule_rotation_id", "id",
							},
				},
    "rootly_schedule_rotation_user": {
					
							"rootly_schedule_rotation": {
								"schedule_rotation_id", "id",
							},
				},
    "rootly_schedule_rotation": {
					
							"rootly_schedule": {
								"schedule_id", "id",
							},
				},
    "rootly_status_page_template": {
					
							"rootly_status_page": {
								"status_page_id", "id",
							},
				},
    "rootly_incident_sub_status": {
					
							"rootly_incident": {
								"incident_id", "id",
							},
				},
    "rootly_retrospective_process_group": {
					
							"rootly_retrospective_process": {
								"retrospective_process_id", "id",
							},
				},
    "rootly_retrospective_process_group_step": {
					
							"rootly_retrospective_process_group": {
								"retrospective_process_group_id", "id",
							},
				},
    "rootly_escalation_level": {
					
							"rootly_escalation_policy": {
								"escalation_policy_id", "id",
							},
				},
    "rootly_escalation_path": {
					
							"rootly_escalation_policy": {
								"escalation_policy_id", "id",
							},
				},
	}
}

func (p *RootlyProvider) GetSupportedService() map[string]terraformutils.ServiceGenerator {
	return map[string]terraformutils.ServiceGenerator{
		"authorization": &AuthorizationGenerator{},
		"cause": &CauseGenerator{},
		"custom_form": &CustomFormGenerator{},
		"dashboard": &DashboardGenerator{},
		"environment": &EnvironmentGenerator{},
		"form_field": &FormFieldGenerator{},
		"form_set": &FormSetGenerator{},
		"functionality": &FunctionalityGenerator{},
		"workflow_group": &WorkflowGroupGenerator{},
		"workflow": &WorkflowGenerator{},
		"heartbeat": &HeartbeatGenerator{},
		"incident_permission_set": &IncidentPermissionSetGenerator{},
		"incident_role": &IncidentRoleGenerator{},
		"incident_type": &IncidentTypeGenerator{},
		"playbook": &PlaybookGenerator{},
		"role": &RoleGenerator{},
		"schedule": &ScheduleGenerator{},
		"service": &ServiceGenerator{},
		"severity": &SeverityGenerator{},
		"status_page": &StatusPageGenerator{},
		"team": &TeamGenerator{},
		"webhooks_endpoint": &WebhooksEndpointGenerator{},
		"sub_status": &SubStatusGenerator{},
	}
}