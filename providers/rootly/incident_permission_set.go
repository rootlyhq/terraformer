
// Generated by generators/rootly/rootly.js
 
package rootly

import (
	
	"github.com/GoogleCloudPlatform/terraformer/terraformutils"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/v2/schema"
)

type IncidentPermissionSetGenerator struct {
	RootlyService
}

func (g* IncidentPermissionSetGenerator) InitResources() error {
	page_size := 50
	page_num := 1

	client, err := g.RootlyClient()
	if err != nil {
		return err
	}

	for {
		resources, err := func(page_size, page_num int) ([]interface{}, error) {
			params := new(rootlygo.ListIncidentPermissionSetsParams)
			params.PageSize = &page_size
			params.PageNumber = &page_num
			return client.ListIncidentPermissionSets(params)
		}(page_size, page_num)

		if err != nil {
			return err
		}

		if len(resources) == 0 {
			break
		}

  	for _, resource := range resources {
      tf_resource := g.createIncidentPermissionSetResource(resource)
      g.Resources = append(g.Resources, tf_resource)
      child_incident_permission_set_boolean, err := g.createIncidentPermissionSetBooleanResources(tf_resource.InstanceState.ID)
      if err != nil {
        return err
      }
      g.Resources = append(g.Resources, child_incident_permission_set_boolean...)
child_incident_permission_set_resource, err := g.createIncidentPermissionSetResourceResources(tf_resource.InstanceState.ID)
      if err != nil {
        return err
      }
      g.Resources = append(g.Resources, child_incident_permission_set_resource...)
  	}

		page_num += 1
	}

	return nil
}

func (g *IncidentPermissionSetGenerator) createIncidentPermissionSetResource(provider_resource interface{}) terraformutils.Resource {
	x, _ := provider_resource.(*client.IncidentPermissionSet)
	return terraformutils.NewSimpleResource(
		x.ID,
		x.Slug,
		"rootly_incident_permission_set",
		g.ProviderName,
		[]string{},
	)
}


func (g *IncidentPermissionSetGenerator) PostConvertHook() error {
  for _, resource := range g.Resources {
		
    if resource.InstanceInfo.Type != "rootly_incident_permission_set" {
      continue
    }
		
    
        for i, incident_permission_set_boolean := range g.Resources {
          if incident_permission_set_boolean.InstanceInfo.Type != "rootly_incident_permission_set_boolean" {
            continue
          }
          if incident_permission_set_boolean.InstanceState.Attributes["incident_permission_set_id"] == resource.InstanceState.ID {
            g.Resources[i].Item["incident_permission_set_id"] = "${" + resource.InstanceInfo.Type + "." + resource.ResourceName + ".id}"
          }
        }
      

        for i, incident_permission_set_resource := range g.Resources {
          if incident_permission_set_resource.InstanceInfo.Type != "rootly_incident_permission_set_resource" {
            continue
          }
          if incident_permission_set_resource.InstanceState.Attributes["incident_permission_set_id"] == resource.InstanceState.ID {
            g.Resources[i].Item["incident_permission_set_id"] = "${" + resource.InstanceInfo.Type + "." + resource.ResourceName + ".id}"
          }
        }
      
  }

  return nil
}


func (g *IncidentPermissionSetGenerator) createIncidentPermissionSetBooleanResources(parent_id string) ([]terraformutils.Resource, error) {
	page_size := 50
	page_num := 1

	client, err := g.RootlyClient()
	if err != nil {
		return nil, err
	}

  var tf_resources []terraformutils.Resource

	for {
		resources, err := func(page_size, page_num int) ([]interface{}, error) {
			params := new(rootlygo.ListIncidentPermissionSetBooleansParams)
			params.PageSize = &page_size
			params.PageNumber = &page_num
			return client.ListIncidentPermissionSetBooleans(parent_id, params)
		}(page_size, page_num)

		if err != nil {
			return nil, err
		}

		if len(resources) == 0 {
			break
		}

  	for _, resource := range resources {
      tf_resources = append(tf_resources, g.createIncidentPermissionSetBooleanResource(resource))
  	}

		page_num += 1
	}

	return tf_resources, nil
}

func (g *IncidentPermissionSetGenerator) createIncidentPermissionSetBooleanResource(provider_resource interface{}) terraformutils.Resource {
	x, _ := provider_resource.(*client.IncidentPermissionSetBoolean)
	return terraformutils.NewSimpleResource(
		x.ID,
		x.ID,
		"rootly_incident_permission_set_boolean",
		g.ProviderName,
		[]string{},
	)
}


func (g *IncidentPermissionSetGenerator) createIncidentPermissionSetResourceResources(parent_id string) ([]terraformutils.Resource, error) {
	page_size := 50
	page_num := 1

	client, err := g.RootlyClient()
	if err != nil {
		return nil, err
	}

  var tf_resources []terraformutils.Resource

	for {
		resources, err := func(page_size, page_num int) ([]interface{}, error) {
			params := new(rootlygo.ListIncidentPermissionSetResourcesParams)
			params.PageSize = &page_size
			params.PageNumber = &page_num
			return client.ListIncidentPermissionSetResources(parent_id, params)
		}(page_size, page_num)

		if err != nil {
			return nil, err
		}

		if len(resources) == 0 {
			break
		}

  	for _, resource := range resources {
      tf_resources = append(tf_resources, g.createIncidentPermissionSetResourceResource(resource))
  	}

		page_num += 1
	}

	return tf_resources, nil
}

func (g *IncidentPermissionSetGenerator) createIncidentPermissionSetResourceResource(provider_resource interface{}) terraformutils.Resource {
	x, _ := provider_resource.(*client.IncidentPermissionSetResource)
	return terraformutils.NewSimpleResource(
		x.ID,
		x.ID,
		"rootly_incident_permission_set_resource",
		g.ProviderName,
		[]string{},
	)
}

