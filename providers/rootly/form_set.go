
// Generated by generators/rootly/rootly.js
 
package rootly

import (
	
	"github.com/GoogleCloudPlatform/terraformer/terraformutils"
	"github.com/rootlyhq/terraform-provider-rootly/v2/client"
	rootlygo "github.com/rootlyhq/terraform-provider-rootly/v2/schema"
)

type FormSetGenerator struct {
	RootlyService
}

func (g* FormSetGenerator) InitResources() error {
	page_size := 50
	page_num := 1

	client, err := g.RootlyClient()
	if err != nil {
		return err
	}

	for {
		resources, err := func(page_size, page_num int) ([]interface{}, error) {
			params := new(rootlygo.ListFormSetsParams)
			params.PageSize = &page_size
			params.PageNumber = &page_num
			return client.ListFormSets(params)
		}(page_size, page_num)

		if err != nil {
			return err
		}

		if len(resources) == 0 {
			break
		}

  	for _, resource := range resources {
      tf_resource := g.createFormSetResource(resource)
      g.Resources = append(g.Resources, tf_resource)
      child_form_set_condition, err := g.createFormSetConditionResources(tf_resource.InstanceState.ID)
      if err != nil {
        return err
      }
      g.Resources = append(g.Resources, child_form_set_condition...)
  	}

		page_num += 1
	}

	return nil
}

func (g *FormSetGenerator) createFormSetResource(provider_resource interface{}) terraformutils.Resource {
	x, _ := provider_resource.(*client.FormSet)
	return terraformutils.NewSimpleResource(
		x.ID,
		x.Slug,
		"rootly_form_set",
		g.ProviderName,
		[]string{},
	)
}


func (g *FormSetGenerator) PostConvertHook() error {
  for _, resource := range g.Resources {
		
    if resource.InstanceInfo.Type != "rootly_form_set" {
      continue
    }
		
    
        for i, form_set_condition := range g.Resources {
          if form_set_condition.InstanceInfo.Type != "rootly_form_set_condition" {
            continue
          }
          if form_set_condition.InstanceState.Attributes["form_set_id"] == resource.InstanceState.ID {
            g.Resources[i].Item["form_set_id"] = "${" + resource.InstanceInfo.Type + "." + resource.ResourceName + ".id}"
          }
        }
      
  }

  return nil
}


func (g *FormSetGenerator) createFormSetConditionResources(parent_id string) ([]terraformutils.Resource, error) {
	page_size := 50
	page_num := 1

	client, err := g.RootlyClient()
	if err != nil {
		return nil, err
	}

  var tf_resources []terraformutils.Resource

	for {
		resources, err := func(page_size, page_num int) ([]interface{}, error) {
			params := new(rootlygo.ListFormSetConditionsParams)
			params.PageSize = &page_size
			params.PageNumber = &page_num
			return client.ListFormSetConditions(parent_id, params)
		}(page_size, page_num)

		if err != nil {
			return nil, err
		}

		if len(resources) == 0 {
			break
		}

  	for _, resource := range resources {
      tf_resources = append(tf_resources, g.createFormSetConditionResource(resource))
  	}

		page_num += 1
	}

	return tf_resources, nil
}

func (g *FormSetGenerator) createFormSetConditionResource(provider_resource interface{}) terraformutils.Resource {
	x, _ := provider_resource.(*client.FormSetCondition)
	return terraformutils.NewSimpleResource(
		x.ID,
		x.ID,
		"rootly_form_set_condition",
		g.ProviderName,
		[]string{},
	)
}

